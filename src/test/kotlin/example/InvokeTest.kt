package example

import com.amazonaws.services.lambda.runtime.Context
import com.amazonaws.services.lambda.runtime.events.*
import com.amazonaws.services.lambda.runtime.tests.annotations.Event
import com.google.gson.Gson
import com.google.gson.GsonBuilder
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.params.ParameterizedTest
import org.slf4j.Logger
import org.slf4j.LoggerFactory

internal class InvokeTest {
    var gson: Gson = GsonBuilder().setPrettyPrinting().create()

    @ParameterizedTest
    @Event(value = "events/apigateway-v1.json", type = APIGatewayProxyRequestEvent::class)
    fun testApiGatewayV1(event: APIGatewayProxyRequestEvent?) {
        logger.info("Invoke TEST - ApiGatewayV1")
        val context: Context = TestContext()
        val handler = HandlerApiGatewayV1()
        val response = handler.handleRequest(event!!, context)
        val expected = "<!DOCTYPE html><html><head><title>" + "Hello world!" + "</title></head><body>" +
                "<h1>Welcome</h1><p>Page generated by a Lambda function.</p>" +
                "</body></html>"
        Assertions.assertEquals(expected, response.body)
    }

    @ParameterizedTest
    @Event(value = "events/apigateway-v2.json", type = APIGatewayV2HTTPEvent::class)
    fun testApiGatewayV2(event: APIGatewayV2HTTPEvent?) {
        logger.info("Invoke TEST - ApiGatewayV1")
        val context: Context = TestContext()
        val handler = HandlerApiGatewayV2()
        val response = handler.handleRequest(event!!, context)
        val expected = "<!DOCTYPE html><html><head><title>" + "Hello world!" + "</title></head><body>" +
                "<h1>Welcome</h1><p>Page generated by a Lambda function.</p>" +
                "</body></html>"
        Assertions.assertEquals(expected, response.body)
    }

    @ParameterizedTest
    @Event(value = "events/cloudfront.json", type = CloudFrontEvent::class)
    fun testCloudFront(event: CloudFrontEvent?) {
        logger.info("Invoke TEST - CloudFront")
        val context: Context = TestContext()
        val handler = HandlerCloudFront()
        val response = handler.handleRequest(event!!, context)
        Assertions.assertEquals(1, response.size)
        Assertions.assertEquals("/picture.jpg", response[0])
    }

    @ParameterizedTest
    @Event(value = "events/codecommit-push.json", type = CodeCommitEvent::class)
    fun testCodeCommit(event: CodeCommitEvent?) {
        logger.info("Invoke TEST - CodeCommit")
        val context: Context = TestContext()
        val handler = HandlerCodeCommit()
        val response = handler.handleRequest(event!!, context)
        Assertions.assertEquals(1, response.size)
        Assertions.assertEquals("5c4ef1049f1d27deadbeeff313e0730018be182b", response[0])
    }

    @ParameterizedTest
    @Event(value = "events/cognito-sync.json", type = CognitoEvent::class)
    fun testCognito(event: CognitoEvent?) {
        logger.info("Invoke TEST - Cognito")
        val context: Context = TestContext()
        val handler = HandlerCognito()
        val response = handler.handleRequest(event!!, context)
        Assertions.assertEquals(2, response.size)
        Assertions.assertEquals("replace", response[0])
        Assertions.assertEquals("replace", response[1])
    }

    @ParameterizedTest
    @Event(value = "events/config-rule.json", type = ConfigEvent::class)
    fun testConfig(event: ConfigEvent?) {
        logger.info("Invoke TEST - Config")
        val context: Context = TestContext()
        val handler = HandlerConfig()
        val response = handler.handleRequest(event!!, context)
        Assertions.assertEquals("arn:aws:config:ca-central-1:123456789012:config-rule/config-rule-0123456", response)
    }

    @ParameterizedTest
    @Event(value = "events/cloudwatch-scheduled.json", type = ScheduledEvent::class)
    fun testCWEvents(event: ScheduledEvent?) {
        logger.info("Invoke TEST - CWEvents")
        val context: Context = TestContext()
        val handler = HandlerCWEvents()
        val response = handler.handleRequest(event!!, context)
        Assertions.assertEquals(1, response.size)
        Assertions.assertEquals("arn:aws:events:us-east-2:123456789012:rule/my-rule", response[0])
    }

    @ParameterizedTest
    @Event(value = "events/cloudwatch-logs.json", type = CloudWatchLogsEvent::class)
    fun testCWLogs(event: CloudWatchLogsEvent?) {
        logger.info("Invoke TEST - CWLogs")
        val context: Context = TestContext()
        val handler = HandlerCWLogs()
        val response = handler.handleRequest(event!!, context)
        Assertions.assertNotNull(response)
    }

    @ParameterizedTest
    @Event(value = "events/dynamodb-record.json", type = DynamodbEvent::class)
    fun testDynamoDB(event: DynamodbEvent?) {
        logger.info("Invoke TEST - DynamoDB")
        val context: Context = TestContext()
        val handler = HandlerDynamoDB()
        val response = handler.handleRequest(event!!, context)
        Assertions.assertEquals(2, response.size)
        Assertions.assertEquals("INSERT", response[0])
        Assertions.assertEquals("MODIFY", response[1])
    }

    @ParameterizedTest
    @Event(value = "events/firehose-record.json", type = KinesisFirehoseEvent::class)
    fun testFirehose(event: KinesisFirehoseEvent?) {
        logger.info("Invoke TEST - Firehose")
        val context: Context = TestContext()
        val handler = HandlerFirehose()
        val response = handler.handleRequest(event!!, context)
        Assertions.assertEquals(1, response.size)
        Assertions.assertEquals("49546986683135544286507457936321625675700192471156785154", response[0])
    }

    //  @ParameterizedTest
    //  @Event(value = "events/kinesis-record.json", type = KinesisEvent.class)
    //  void testKinesis(KinesisEvent event) {
    //    logger.info("Invoke TEST - Kinesis");
    //    Context context = new TestContext();
    //    HandlerKinesis handler = new HandlerKinesis();
    //    List<String> response = handler.handleRequest(event, context);
    //    assertEquals(2, response.size());
    //  }
    @ParameterizedTest
    @Event(value = "events/lex-flowers.json", type = LexEvent::class)
    fun testLex(event: LexEvent?) {
        logger.info("Invoke TEST - Lex")
        val context: Context = TestContext()
        val handler = HandlerLex()
        val response = handler.handleRequest(event!!, context)
        Assertions.assertEquals("OrderFlowers", response)
    }

    @ParameterizedTest
    @Event(value = "events/s3-notification.json", type = S3Event::class)
    fun testS3(event: S3Event?) {
        logger.info("Invoke TEST - S3")
        val context: Context = TestContext()
        val handler = HandlerS3()
        val response = handler.handleRequest(event!!, context)
        Assertions.assertEquals("BUCKET_NAME/inbound/sample-java-s3.png", response)
    }

    @ParameterizedTest
    @Event(value = "events/sns-notification.json", type = SNSEvent::class)
    fun testSNS(event: SNSEvent?) {
        logger.info("Invoke TEST - SNS")
        val context: Context = TestContext()
        val handler = HandlerSNS()
        val response = handler.handleRequest(event!!, context)
        Assertions.assertEquals(1, response.size)
        Assertions.assertEquals(
            "Updated and expanded documentation for using Lambda with API Gateway, including support for HTTP APIs.",
            response[0]
        )
    }

    @ParameterizedTest
    @Event(value = "events/sqs-record.json", type = SQSEvent::class)
    fun testSQS(event: SQSEvent?) {
        logger.info("Invoke TEST - SQS")
        val context: Context = TestContext()
        val handler = HandlerSQS()
        val response = handler.handleRequest(event!!, context)
        Assertions.assertEquals(1, response.size)
        Assertions.assertEquals("Hello from SQS!", response[0])
    }

    companion object {
        private val logger: Logger = LoggerFactory.getLogger(InvokeTest::class.java)
    }
}
